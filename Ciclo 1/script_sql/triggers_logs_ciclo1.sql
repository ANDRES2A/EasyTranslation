/*Creacion de tabla LOG*/
drop table LOG cascade constraints;
create table LOG
(
   "NICK_LOG"           char(200),
   "ROL_LOG"            char(30),
   "SQL_LOG"            varchar2(250),
   "TABLA_LOG"          varchar2(250),
   "FECHA_LOG"          timestamp,
   "ID_LOG"             integer              not null,
   constraint pk_log primary key ("ID_LOG")
);

/* trigger de idiomas*/
CREATE OR REPLACE TRIGGER idioma_log
AFTER INSERT OR UPDATE OR DELETE ON "IDIOMA"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT('Insert ',:nuevo."DESCRIPCION_ID");
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT('Eliminado ',:antiguo."DESCRIPCION_ID");
  END IF;
  IF UPDATING  THEN
     SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."DESCRIPCION_ID"),' a '),:nuevo."DESCRIPCION_ID");
  END IF;
  INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Idioma',CURRENT_TIMESTAMP,ID_LOG);
END;

/* trigger de usuarios*/
CREATE OR REPLACE TRIGGER usuario_log
AFTER INSERT OR UPDATE OR DELETE ON "USUARIO"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT('Insert ',:nuevo."CORREO_US");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG")VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Usuario',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT('Eliminado ',:antiguo."CORREO_US");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Usuario',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF UPDATING  THEN
     IF :antiguo."CORREO_US"!=:nuevo."CORREO_US" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."CORREO_US"),' a '),:nuevo."CORREO_US");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Usuario',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
     IF :antiguo."NOMBRE_US"!=:nuevo."NOMBRE_US" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."NOMBRE_US"),' a '),:nuevo."NOMBRE_US");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Usuario',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
     IF :antiguo."PASSWORD_US"!=:nuevo."PASSWORD_US" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."PASSWORD_US"),' a '),:nuevo."PASSWORD_US");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Usuario',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
  END IF;
END;

/* trigger de peticiones*/
CREATE OR REPLACE TRIGGER peticion_log
AFTER INSERT OR UPDATE OR DELETE ON "PETICION"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT('Insert ',:nuevo."CODIGO_PE");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT('Eliminado ',:antiguo."CODIGO_PE");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF UPDATING  THEN
     IF :antiguo."ABREVIACION_ID"!=:nuevo."ABREVIACION_ID" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."ABREVIACION_ID"),' a '),:nuevo."ABREVIACION_ID");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
     IF :antiguo."IDI_ABREVIACION_ID"!=:nuevo."IDI_ABREVIACION_ID" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."IDI_ABREVIACION_ID"),' a '),:nuevo."IDI_ABREVIACION_ID");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
     IF :antiguo."DESCRIPCION_PE"!=:nuevo."DESCRIPCION_PE" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."DESCRIPCION_PE"),' a '),:nuevo."DESCRIPCION_PE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
    IF :antiguo."TIPO_PE"!=:nuevo."TIPO_PE" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."TIPO_PE"),' a '),:nuevo."TIPO_PE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
    IF :antiguo."ESTADO_PE"!=:nuevo."ESTADO_PE" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."ESTADO_PE"),' a '),:nuevo."ESTADO_PE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Peticion',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
  END IF;
END;

/* trigger de revisores*/
CREATE OR REPLACE TRIGGER revisor_log
AFTER INSERT OR UPDATE OR DELETE ON "REVISOR"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT('Insert ',:nuevo."CORREO_RE");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Revisor',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT('Eliminado ',:antiguo."CORREO_RE");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Revisor',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF UPDATING  THEN
     IF :antiguo."CORREO_RE"!=:nuevo."CORREO_RE" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."CORREO_RE"),' a '),:nuevo."CORREO_RE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Revisor',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
     IF :antiguo."NOMBRE_RE"!=:nuevo."NOMBRE_RE" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."NOMBRE_RE"),' a '),:nuevo."NOMBRE_RE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Revisor',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
  END IF;
END;

/* trigger de sabe*/
CREATE OR REPLACE TRIGGER sabe_log
AFTER INSERT OR UPDATE OR DELETE ON "SABE"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT(CONCAT(CONCAT('Insert ',:nuevo."CORREO_US"),' -> '),:nuevo."ABREVIACION_ID");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT(CONCAT(CONCAT('Eliminado ',:antiguo."CORREO_US"),' -> '),:antiguo."ABREVIACION_ID");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF UPDATING  THEN
     IF :antiguo."ABREVIACION_ID"!=:nuevo."ABREVIACION_ID" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."ABREVIACION_ID"),' a '),:nuevo."ABREVIACION_ID"),' -> '),:antiguo."CORREO_US");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
  END IF;
END;

/* trigger de sabe revisor*/
CREATE OR REPLACE TRIGGER sabe_revisor_log
AFTER INSERT OR UPDATE OR DELETE ON "SABE_REVISOR"
   REFERENCING OLD AS antiguo NEW AS nuevo
   FOR EACH ROW
   DECLARE
      ID_LOG NUMBER;
      NICK_LOG CHAR(200);
      ROL_LOG VARCHAR2(30);
      SQL_LOG VARCHAR2(250);
BEGIN
     SELECT COUNT(*)+1 INTO ID_LOG FROM LOG;
     SELECT sys_context('USERENV','HOST') INTO NICK_LOG FROM dual;
     SELECT user INTO ROL_LOG FROM dual;
  IF INSERTING THEN
     SQL_LOG:=CONCAT(CONCAT(CONCAT('Insert ',:nuevo."CORREO_RE"),' -> '),:nuevo."ABREVIACION_ID");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe_Revisor',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF DELETING  THEN
     SQL_LOG:=CONCAT(CONCAT(CONCAT('Eliminado ',:antiguo."CORREO_RE"),' -> '),:antiguo."ABREVIACION_ID");
     INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe_Revisor',CURRENT_TIMESTAMP,ID_LOG);
  END IF;
  IF UPDATING  THEN
     IF :antiguo."ABREVIACION_ID"!=:nuevo."ABREVIACION_ID" THEN
        SQL_LOG:=CONCAT(CONCAT(CONCAT(CONCAT(CONCAT('Actualizado ',:antiguo."ABREVIACION_ID"),' a '),:nuevo."ABREVIACION_ID"),' -> '),:antiguo."CORREO_RE");
        INSERT INTO LOG ("NICK_LOG","ROL_LOG","SQL_LOG","TABLA_LOG","FECHA_LOG","ID_LOG") VALUES (NICK_LOG,ROL_LOG,SQL_LOG,'Sabe_Revisor',CURRENT_TIMESTAMP,ID_LOG);
     END IF;
  END IF;
END;